package com.example.accessingdatamysql.Controllers;

import com.example.accessingdatamysql.Repository.UserRepository;
import com.example.accessingdatamysql.modelsTemp.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/user")
public class UserController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@GetMapping("/greeting")
	public @ResponseBody String greeting(@RequestParam(name = "name", required = false, defaultValue = "There") String name, Model model) {
		model.addAttribute("name", name);
		return "<h1> Hello, "+ name+ "</h1>";
	}

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody User addNewUser (@RequestBody User user) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		userRepository.save(user);
		return user;
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	//@PutMapping("/users")
	//public void updateUser(@PathVariable("user") User user) {
	//	userRepository.updateUser(user);
	//}

	@DeleteMapping("/users/{id}")
	public void deleteUser(@PathVariable("id") int id) throws Exception {
		userRepository.deleteById(id);
	}
}
